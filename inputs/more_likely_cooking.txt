;; This Church program models a fairly judged cooking competition among various chefs.

;; Define the cooking skills based on the chef's background and condition.
(define (cooking-skills chef condition)
  (cond 
    ((equal? chef 'skillful-professional) (gaussian 80 10))
    ((equal? chef 'mediocre-semi-professional) (gaussian 60 15))
    ((equal? chef 'local-novice-champion) (gaussian 55 20))
    ((equal? chef 'gifted-inexperienced-amateur) (gaussian 50 25))
    ((equal? chef 'talented-novice) (gaussian 50 20))
    ((equal? chef 'inexperienced-amateur) (gaussian 40 20))
    ;; Adjusting skill level based on chef's condition (e.g., off day)
    ((equal? condition 'off-day) (- (gaussian 10 5)))
    (else 0)
  )
)

;; Determine the winner of the cooking competition.
(define (won-cooking-match chef-1 chef-2 chef-1-condition chef-2-condition)
  (> (+ (cooking-skills chef-1 chef-1-condition))
     (+ (cooking-skills chef-2 chef-2-condition)))
)

;; Now, let us translate some user-defined statements.
;; Each statement begins with either `Condition` or `Query`.
;; `Condition` statements provide facts about the scenario.
;; `Query` statements are questions that evaluate quantities of interest.
